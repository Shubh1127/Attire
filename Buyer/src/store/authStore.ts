import { create } from 'zustand';
import { User } from '../types';

interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<boolean>;
  register: (name: string, email: string, password: string) => Promise<boolean>;
  logout: () => void;
  addAddress: (address: Omit<Address, 'id'>) => void;
  updateAddress: (id: string, address: Partial<Address>) => void;
  removeAddress: (id: string) => void;
}

// Mock user data for demo purposes
const mockUser: User = {
  id: '1',
  name: 'John Doe',
  email: 'john@example.com',
  addresses: [
    {
      id: '1',
      title: 'Home',
      fullName: 'John Doe',
      street: '123 Main St',
      city: 'Mumbai',
      state: 'Maharashtra',
      postalCode: '400001',
      country: 'India',
      phone: '9876543210',
      isDefault: true,
    },
  ],
};

export const useAuthStore = create<AuthState>((set, get) => ({
  user: null,
  isAuthenticated: false,
  isLoading: false,

  login: async (email: string, password: string) => {
    set({ isLoading: true });
    
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Simple validation for demo
    if (email === 'demo@attire.com' && password === 'password') {
      set({ user: mockUser, isAuthenticated: true, isLoading: false });
      return true;
    }
    
    set({ isLoading: false });
    return false;
  },

  register: async (name: string, email: string, password: string) => {
    set({ isLoading: true });
    
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // In a real app, this would make an API call to register the user
    const newUser: User = {
      id: '2', // Would be generated by the server
      name,
      email,
      addresses: [],
    };
    
    set({ user: newUser, isAuthenticated: true, isLoading: false });
    return true;
  },

  logout: () => {
    set({ user: null, isAuthenticated: false });
  },

  addAddress: (address) => {
    const { user } = get();
    if (!user) return;

    const newAddress = {
      ...address,
      id: Math.random().toString(36).substring(2, 10),
    };

    // If this is the first address or marked as default, update other addresses
    let updatedAddresses = [...user.addresses];
    if (address.isDefault || user.addresses.length === 0) {
      updatedAddresses = updatedAddresses.map(addr => ({
        ...addr,
        isDefault: false,
      }));
    }

    set({
      user: {
        ...user,
        addresses: [...updatedAddresses, newAddress],
      },
    });
  },

  updateAddress: (id, addressUpdate) => {
    const { user } = get();
    if (!user) return;

    let updatedAddresses = [...user.addresses];
    
    // If setting this address as default, update other addresses
    if (addressUpdate.isDefault) {
      updatedAddresses = updatedAddresses.map(addr => ({
        ...addr,
        isDefault: false,
      }));
    }

    updatedAddresses = updatedAddresses.map(addr => 
      addr.id === id ? { ...addr, ...addressUpdate } : addr
    );

    set({
      user: {
        ...user,
        addresses: updatedAddresses,
      },
    });
  },

  removeAddress: (id) => {
    const { user } = get();
    if (!user) return;

    const updatedAddresses = user.addresses.filter(addr => addr.id !== id);
    
    // If we removed the default address and have other addresses, set the first one as default
    if (user.addresses.find(addr => addr.id === id)?.isDefault && updatedAddresses.length > 0) {
      updatedAddresses[0].isDefault = true;
    }

    set({
      user: {
        ...user,
        addresses: updatedAddresses,
      },
    });
  },
}));